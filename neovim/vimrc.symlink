" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')
Plug 'airblade/vim-gitgutter'                                             " Git diff in gutter
Plug 'easymotion/vim-easymotion'                                          " EasyMotion provides a simple way to use some motions in vim by allowing you to press one key to jump directly to the target.
Plug 'heavenshell/vim-jsdoc'                                              " JSDoc
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install'  }   " Preview markdown on your modern browser with synchronised scrolling and flexible configuration
Plug 'jeffkreeftmeijer/vim-numbertoggle'                                  " Line number toggling
Plug 'junegunn/fzf.vim'                                                   " fzf wrapper for Vim
Plug 'ludovicchabant/vim-gutentags'                                       " Tag management
Plug 'mhinz/vim-startify'                                                 " Start screen for Vim
Plug 'neoclide/coc.nvim', {'branch': 'release'}                           " Intellisense engine for vim8 & neovim
Plug 'plytophogy/vim-virtualenv'                                          " Adds support for pyenv virtualenvs
Plug 'rbong/vim-crystalline'                                              " Status line
Plug 'ryanoasis/vim-devicons'                                             " Devicons (needs to go last, can alter other plugins)
Plug 'fatih/vim-go'                                                       " Adds Go language support
Plug 'sheerun/vim-polyglot'                                               " A collection of language packs for Vim
Plug 'tomtom/tcomment_vim'                                                " Provides easy to use, file-type sensible comments
Plug 'tpope/vim-endwise'                                                  " Ends certain structures automatically, like if/end
Plug 'tpope/vim-fugitive'                                                 " Git wrapper, supports commands like :Gedit
Plug 'tpope/vim-rhubarb'                                                  " Sets up :Git to use hub if installed rather than git
Plug 'tpope/vim-surround'                                                 " Adds surroundings like parentheses, brackets, quotes, XML tags, etc. Use with cs'
Plug 'tpope/vim-vinegar'                                                  " Filesystem project drawer, press - to open
Plug 'w0rp/ale'                                                           " ALE (Asynchronous Lint Engine) is a plugin for providing linting in Neovim
Plug 'lifepillar/vim-gruvbox8'
call plug#end()

" Leave the past behind
set nocompatible

" Disable auto-execution of code in sandbox
set nomodeline

" True color support
set termguicolors

" Color scheme
colorscheme gruvbox8
set background=dark

" Set leader
let mapleader="\<Space>"
let maplocalleader="\\"

" Make copy operations work with the clipboard
set clipboard=unnamed

" Open new split panes to right and bottom, which feels more natural than Vimâ€™s default
set splitbelow
set splitright

" Disable auto matching parens
let g:loaded_matchparen=1

" Don't render special chars (tabs, trails, ...)
set nolist

" Lazy drawing
set lazyredraw
set ttyfast

" Plugs
" ===========================================================================

" Coc.nvim {{{
" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:echodoc_enable_at_startup = 1

nmap <silent> gn <Plug>(coc-rename)
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

command! -nargs=0 Format :call CocAction('format')
command! -nargs=0 Prettier :CocCommand prettier.formatFile
" }}}

" Ale {{{
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'
" let g:ale_fixers = {'javascript': ['eslint']}
let g:ale_fixers = {'javascript': ['standard']}
" let g:ale_linters = {'javascript': ['eslint', 'prettier']}
let g:ale_linters = {'javascript': ['standard']}

let g:ale_fix_on_save = 1
" }}}

" fzf and ripgrep {{{
set rtp+=/usr/local/opt/fzf

lua require("fzf")

autocmd! FileType fzf
autocmd  FileType fzf set nonu nornu

" Set environment variables
let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!.git/*"'
let $FZF_DEFAULT_OPTS='--layout=reverse'

let g:fzf_layout = { 'window': 'lua NavigationFloatingWin()' }

 " Open fzf Files
let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(blue)%C(bold)%cr%C(white)"'

nmap <C-p> :Files<CR>

if executable('rg')
  set grepprg=rg\ --vimgrep

  " fzf ripgrep
  command! -bang -nargs=* Rg
    \ call fzf#vim#grep(
    \   'rg --column --line-number --hidden --ignore-case --no-heading --color=always '.shellescape(<q-args>), 1,
    \   <bang>0 ? fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'up:60%')
    \           : fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right:50%:hidden', '?'),
    \   <bang>0)

  nnoremap <C-f> :Rg<Cr>
endif
" }}}

" GitGutter {{{
" Make GitGutter work in NeoVim.
let g:gitgutter_async = 1
let g:gitgutter_sign_removed_first_line = "^_"
" }}}

" JSDoc {{{

" Allow ECMAScript 6 shorthand syntax.
let g:jsdoc_enable_es6 = 1

" Js doc
nmap <silent> <C-y> <Plug>(jsdoc)

" }}}

" Startify {{{
" Don't change to the file's directory
let g:startify_change_to_dir = 0
" Disable random quotes header
let g:startify_custom_header = []
" Don't split when opening a file
autocmd User Startified setlocal buftype=
" }}}

" Go {{{
autocmd FileType go nmap <leader>r <Plug>(go-run)
autocmd FileType go nmap <leader>b <Plug>(go-build)
autocmd FileType go nmap <leader>d <Plug>(go-def)

autocmd FileType go nmap <leader>gt :GoDeclsDir<cr>

" Run goimports when running gofmt
let g:go_fmt_command = "goimports"
" Show type information
let g:go_auto_sameids = 1
" Enable completing of go pointers
" Enable syntax highlighting per default
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1

" Add the failing test name to the output of :GoTest
let g:go_test_show_name = 1

" Set whether the JSON tags should be snakecase or camelcase.
let g:go_addtags_transform = "camelcase"
" }}}

" Python {{{
au BufRead,BufNewFile *.py set expandtab
let g:python_host_prog = '/Users/jonasstenberg/.pyenv/versions/neovim2/bin/python'
let g:python3_host_prog = '/Users/jonasstenberg/.pyenv/versions/neovim3/bin/python'
" }}}

" Vue {{{
let g:vue_disable_pre_processors = 1
" }}}

" Crystalline {{{
function! StatusLine(current)
  return (a:current ? crystalline#mode() . '%#Crystalline#' : '%#CrystallineInactive#')
        \ . ' %f%h%w%m%r '
        \ . (a:current ? '%#CrystallineFill# %{fugitive#head()} ' : '')
        \ . '%=' . (a:current ? '%#Crystalline# %{&paste?"PASTE ":""}%{&spell?"SPELL ":""}' . crystalline#mode_color() : '')
        \ . ' %{&ft}[%{&enc}][%{&ffs}] %l/%L %3(%c%V%) %P '
endfunction

let g:crystalline_statusline_fn = 'StatusLine'
let g:crystalline_theme = 'gruvbox'

set laststatus=2
" }}}

" Gutentags {{{

set tags=./tags,tags;

let g:gutentags_ctags_tagfile = 'tags'
let g:gutentags_file_list_command = 'rg --files'
let g:gutentags_generate_on_new = 1

nnoremap <leader>t <C-]>

" }}}

" easymotion {{{
let g:EasyMotion_do_mapping = 0 " Disable default mappings

" Jump to anywhere you want with minimal keystrokes, with just one key binding.
" `s{char}{label}`
" nmap s <Plug>(easymotion-overwin-f)
" or
" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
nmap s <Plug>(easymotion-overwin-f2)

" Turn on case-insensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
" }}}

" Built-in settings
" ===========================================================================

" Substitution {{{
if exists('&inccommand')
  set inccommand=nosplit
endif
" }}}

" Search {{{
set hlsearch                " highlight all results
set incsearch               " but do highlight as you type your search.
set ignorecase              " make searches case-insensitive...
set smartcase               " ... unless they contain at least one capital letter
set gdefault                " have :s///g flag by default on"
" }}}

" Guides {{{
set relativenumber                                          " show line numbers
set nu rnu

nnoremap <silent> <C-n> :set relativenumber!<CR>

autocmd BufNewFile,BufRead *.js set colorcolumn=80  " ruler at 80 chars width for js files
set history=200                                     " remember a lot of stuff
set ruler                                           " Always show info along bottom.

set cursorcolumn
set cursorline
" }}}

" Files {{{
set autoread                " auto-reload files changed on disk
set updatecount=0           " disable swap files
set nobackup
set noswapfile

" enable functional autosave
augroup autoSaveAndRead
    autocmd!
    autocmd TextChanged,InsertLeave,FocusLost * silent! wall
    autocmd CursorHold * silent! checktime
augroup END
" }}}

" Persistent undo {{{
set undodir=/tmp/vim/undo
set hidden                  " Don't unload hidden buffers
set undofile                " Save undos to file
set undolevels=1000
set undoreload=10000

" Create undo directory if it's missing
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
" }}}

" Indentation {{{
set cindent                 " auto-indent braces
set autoindent              " auto-indent
set tabstop=2               " tab spacing
set softtabstop=2           " unify
set shiftwidth=2            " indent/outdent by 2 columns
set shiftround              " always indent/outdent to the nearest tabstop
set expandtab               " use spaces instead of tabs
set smarttab                " use tabs at the start of a line, spaces elsewherei
set nowrap                  " don't wrap long lines
" }}}

" Code folding {{{
set foldmarker={{{,}}}
set foldenable              " enable folding
set foldmethod=marker
set foldnestmax=10          " maximum nesting of folds
set foldlevelstart=0        " folds start off closed
set foldlevel=0
" }}}

" Compilation {{{
autocmd FileType ruby map <F9> :w<CR>:!rubocop %<CR>
autocmd FileType javascript map <F9> :w<CR>:!eslint %<CR>
" }}}

" Netrw {{{
" 0: One file per line
" 1: One file per line with file size and time stamp
" 2: Files in columns
" 3: Tree
let g:netrw_liststyle=1
let g:netrw_localrmdir="rm -r" " Allow removal of directories that aren't empty
let g:netrw_altv=1            " Split to the right
" }}}

" Omnifunc {{{
filetype plugin on
set omnifunc=syntaxcomplete#Complete
" }}}

" Miscellaneous {{{

" Disable arrow keys
inoremap  <Up>     <NOP>
inoremap  <Down>   <NOP>
inoremap  <Left>   <NOP>
inoremap  <Right>  <NOP>
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>

" Map h j k l to Ctrl+w+h j k l
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Force syntax sync
nnoremap <silent> <leader>s :syntax sync fromstart<CR>

autocmd FileType vue syntax sync fromstart
autocmd FileType markdown syntax sync fromstart

" Pressing ESC removes highlighting
nnoremap <esc> :noh<return><esc>

" Don't lose selection when shifting left or right
xnoremap <  <gv
xnoremap >  >gv

" Move to beginning and end of line
nnoremap H ^
nnoremap L $
vnoremap H ^
vnoremap L g_

nnoremap <C-b> :Buf<Cr>

" Trim trailing whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

" Format JSON
com! FormatJSON %!python -m json.tool

" Auto-create parent directories when expanding file
" Ref: http://stackoverflow.com/a/4294176/517528
function! s:MkNonExDir(file, buf)
    if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
        let dir=fnamemodify(a:file, ':h')
        if !isdirectory(dir)
            call mkdir(dir, 'p')
        endif
    endif
endfunction
augroup BWCCreateDir
    autocmd!
    autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

" use <tab> for trigger completion and navigate to the next complete item
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()

" Close preview window after completion is done
" Automatically close scratch window when finishing a completion or leaving
" insert mode
autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif

" Automatically equalize splits when Vim is resized
autocmd VimResized * wincmd =
" }}}
