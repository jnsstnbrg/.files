function! DoRemote(arg)
  UpdateRemotePlugins
endfunction

" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Neovim
Plug 'ctrlpvim/ctrlp.vim'
Plug 'mileszs/ack.vim'

" JS Linting
Plug 'w0rp/ale'

" JS editorconfig
Plug 'editorconfig/editorconfig-vim'

" JS compilation
Plug 'Shougo/deoplete.nvim', { 'do': function('DoRemote') }
Plug 'ternjs/tern_for_vim', { 'do': 'npm install' }
Plug 'carlitux/deoplete-ternjs', { 'do': 'npm install -g tern' }

" JS doc
Plug 'heavenshell/vim-jsdoc'

" Surround selection
Plug 'tpope/vim-surround'

" Git status in gutter
Plug 'airblade/vim-gitgutter'

" Js syntax highlighting
Plug 'othree/es.next.syntax.vim'
Plug 'othree/yajs.vim'

" nvim color schemes
Plug 'rafi/awesome-vim-colorschemes'

" Initialize plugin system
call plug#end()

" True color support
set termguicolors

colorscheme gruvbox
set background=dark

set cindent
set autoindent              " auto-indent
set tabstop=2               " tab spacing
set softtabstop=2           " unify
set shiftwidth=2            " indent/outdent by 2 columns
set shiftround              " always indent/outdent to the nearest tabstop
set expandtab               " use spaces instead of tabs
set smarttab                " use tabs at the start of a line, spaces elsewherei
set nowrap
set number

set autoread                " auto-reload files changed on disk
set updatecount=0           " disable swap files
set nobackup
set noswapfile

set grepprg=ack\ -a         " use ack when searching with :grep
set hlsearch                " highlight all results
set incsearch               " but do highlight as you type your search.
set ignorecase              " make searches case-insensitive...
set smartcase               " ... unless they contain at least one capital letter
set gdefault                " have :s///g flag by default on"

set inccommand=nosplit
set clipboard=unnamed

set wildignorecase

" Don't lose selection when shifting left or right
xnoremap <  <gv
xnoremap >  >gv

" Disable arrow keys
inoremap  <Up>     <NOP>
inoremap  <Down>   <NOP>
inoremap  <Left>   <NOP>
inoremap  <Right>  <NOP>
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>

" Map h j k l to Ctrl+w+h j k l
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Pressing ESC removes highlighting
nnoremap <esc> :noh<return><esc>

" Js doc
nmap <silent> <C-i> <Plug>(jsdoc)

" Complete with <Tab>
inoremap <silent><expr> <TAB>
    \ pumvisible() ? "\<C-n>" :
    \ <SID>check_back_space() ? "\<TAB>" :
    \ deoplete#mappings#manual_complete()
function! s:check_back_space() abort "{{{
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
endfunction"}}}

" Allow ECMAScript 6 shorthand syntax.
let g:jsdoc_enable_es6 = 1

" Trim trailing whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

let g:netrw_localrmdir="rm -r" " Allow removal of directories that aren't empty

let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_smart_case = 1

" Tern-specific
let g:tern_request_timeout = 1
let g:tern_show_signature_in_pum = '0'
let g:tern#command = ["tern"]
let g:tern#arguments = ["--persistent"]
let g:tern#filetypes = [
                \ 'jsx',
                \ 'javascript.jsx',
                \ 'vue',
                \ ]
