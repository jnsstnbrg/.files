function! DoRemote(arg)
  UpdateRemotePlugins
endfunction

" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Auto-complete quotes, parantheses, brackets, etc
Plug 'Raimondi/delimitMate'
" Asynchronous completion for neovim
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
" Git diff in gutter
Plug 'airblade/vim-gitgutter'
" Status line
Plug 'itchyny/lightline.vim'
" Theme for status line
Plug 'shinchu/lightline-gruvbox.vim'
" fzf wrapper for Vim
Plug 'junegunn/fzf.vim'
" Start screen for Vim
Plug 'mhinz/vim-startify'
" Search tool for Vim
Plug 'mileszs/ack.vim'
" Collection of awesome color schemes for Vim
Plug 'rafi/awesome-vim-colorschemes'
" Provides easy to use, file-type sensible comments
Plug 'tomtom/tcomment_vim'
" Ends certain structures automatically, like if/end
Plug 'tpope/vim-endwise'
" Git wrapper, supports commands like :Gedit
Plug 'tpope/vim-fugitive'
" Sets up :Git to use hub if installed rather than git
Plug 'tpope/vim-rhubarb'
" Adds surroundings like parentheses, brackets, quotes, XML tags, etc. Use with cs'"
Plug 'tpope/vim-surround'
" Filesystem project drawer, press - to open
Plug 'tpope/vim-vinegar'
" ALE (Asynchronous Lint Engine) is a plugin for providing linting in Neovim
Plug 'w0rp/ale'

" HTML/CSS
" ===========================================================================
" Syntax highlighting for CSS3 syntax
Plug 'hail2u/vim-css3-syntax'

" JS
" ===========================================================================
" deoplete.nvim source for javascript.
Plug 'carlitux/deoplete-ternjs', { 'do': 'npm install -g tern' }
" Adds editorconfig highlitning
Plug 'editorconfig/editorconfig-vim'
" JSDoc
Plug 'heavenshell/vim-jsdoc'
" JS syntax highlighting
Plug 'othree/yajs.vim'
" Adds ECMAScript future syntax
Plug 'othree/es.next.syntax.vim'
" Plugin that provides Tern-based JavaScript editing support
Plug 'ternjs/tern_for_vim', { 'do': 'npm install' }

" JS frameworks
" ===========================================================================
" Highlighting for Vue components
Plug 'posva/vim-vue'

" Go
" ===========================================================================
" Adds Go language support for Vim
Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }
" Helper tool that adds context-sensitive autocompletion
Plug 'mdempsky/gocode', { 'rtp': 'vim', 'do': '~/.vim/plugged/gocode/vim/symlink.sh' }
" Asynchronous Go completion for Neovim
Plug 'zchee/deoplete-go', { 'do': 'make'}

" Python
" ===========================================================================
" Small script modifies Vimâ€™s indentation behavior to comply with PEP8
Plug 'Vimjas/vim-python-pep8-indent'
" Adds lots of Python specific features to Vim
Plug 'python-mode/python-mode'
" Adds support for pyenv virtualenvs
Plug 'plytophogy/vim-virtualenv'
" deoplete.nvim source for jedi, adds python syntax highlighting
Plug 'zchee/deoplete-jedi'

" Devicons (needs to go last, can alter other plugins)
Plug 'ryanoasis/vim-devicons'

" Initializu plugin system
call plug#end()

" Leave the past behind
set nocompatible

" True color support
set termguicolors

" Color scheme
colorscheme gruvbox
set background=dark

let g:lightline = {}
let g:lightline.colorscheme = 'gruvbox'

" Set leader
let mapleader="\<Space>"
let maplocalleader="\\"

" Make copy operations work with the clipboard
set clipboard=unnamed

" Search for the word under the cursor
nmap <M-k> :Ack! "\b<cword>\b" <CR>
" }}}

" Plugs
" ===========================================================================
" ripgrep {{{
if executable('rg')
  set grepprg=rg\ --vimgrep
endif
" "}}}

" Ale {{{
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'

" let g:ale_linters = {'vue': ['stylelint', 'eslint']}
" }}}

" Deoplete {{{
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_smart_case = 1

" Tern-specific
let g:tern_request_timeout = 1
let g:tern_show_signature_in_pum = '0'
let g:tern#command = ["tern"]
let g:tern#arguments = ["--persistent"]
let g:tern#filetypes = [
                \ 'jsx',
                \ 'javascript.jsx',
                \ 'vue',
                \ ]" Complete with <Tab>
inoremap <silent><expr> <Tab>
  \ pumvisible() ? "\<C-n>" :
  \ deoplete#mappings#manual_complete()

" Recommended settings
" set completeopt+=noinsert
" set completeopt+=noselect
" }}}

" fzf {{{
set rtp+=/usr/local/opt/fzf

" Set environment variable
" let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -g ""'
let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!.git/*"'

" }}}

" GitGutter {{{
" Make GitGutter work in NeoVim.
let g:gitgutter_async = 1
let g:gitgutter_sign_removed_first_line = "^_"
" }}}

" JSDoc {{{
" Map to CTRL-L
nmap <silent> <C-l> <Plug>(jsdoc)
" Allow ECMAScript 6 shorthand syntax.
let g:jsdoc_enable_es6 = 1
" }}}

" Startify {{{
" Don't change to the file's directory
let g:startify_change_to_dir = 0
" Disable random quotes header
let g:startify_custom_header = []
" Don't split when opening a file
autocmd User Startified setlocal buftype=
" }}}

" Go {{{
autocmd FileType go nmap <leader>r <Plug>(go-run)
autocmd FileType go nmap <leader>b <Plug>(go-build)
autocmd FileType go nmap <leader>d <Plug>(go-def)

autocmd FileType go nmap <leader>gt :GoDeclsDir<cr>

" Run goimports when running gofmt
let g:go_fmt_command = "goimports"
" Show type information
let g:go_auto_type_info = 1
" Enable completing of go pointers
let g:deoplete#sources#go#pointer = 1

" Enable syntax highlighting per default
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1

" Add the failing test name to the output of :GoTest
let g:go_test_show_name = 1

" Set whether the JSON tags should be snakecase or camelcase.
let g:go_addtags_transform = "camelcase"
" }}}

" Python {{{
au BufRead,BufNewFile *.py set expandtab
let g:python_host_prog = '/Users/jonasstenberg/.pyenv/versions/neovim2/bin/python'
let g:python3_host_prog = '/Users/jonasstenberg/.pyenv/versions/neovim3/bin/python'
" }}}

" Vue {{{
let g:vue_disable_pre_processors = 1
" }}}

" Lightline {{{
let g:lightline = {
      \ 'component_function': {
      \   'filename': 'LightlineFilename',
      \ }
      \ }

function! LightlineFilename()
  let root = fnamemodify(get(b:, 'git_dir'), ':h')
  let path = expand('%:p')
  if path[:len(root)-1] ==# root
    return path[len(root)+1:]
  endif
  return expand('%')
endfunction
" }}}

" Built-in settings
" ===========================================================================

" Substitution {{{
if exists('&inccommand')
  set inccommand=nosplit
endif
" }}}

" Search {{{
set hlsearch                " highlight all results
set incsearch               " but do highlight as you type your search.
set ignorecase              " make searches case-insensitive...
set smartcase               " ... unless they contain at least one capital letter
set gdefault                " have :s///g flag by default on"
" }}}

" Guides {{{
set number                                          " show line numbers
autocmd BufNewFile,BufRead *.js set colorcolumn=80  " ruler at 80 chars width for js files
set history=200                                     " remember a lot of stuff
set ruler                                           " Always show info along bottom.
" }}}

" Files {{{
set autoread                " auto-reload files changed on disk
set updatecount=0           " disable swap files
set nobackup
set noswapfile

" enable functional autosave
augroup autoSaveAndRead
    autocmd!
    autocmd TextChanged,InsertLeave,FocusLost * silent! wall
    autocmd CursorHold * silent! checktime
augroup END
" }}}

" Persistent undo {{{
set undodir=/tmp/vim/undo
set hidden                  " Don't unload hidden buffers
set undofile                " Save undos to file
set undolevels=1000
set undoreload=10000

" Create undo directory if it's missing
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
" }}}

" Indentation {{{
set cindent
set autoindent              " auto-indent
set tabstop=2               " tab spacing
set softtabstop=2           " unify
set shiftwidth=2            " indent/outdent by 2 columns
set shiftround              " always indent/outdent to the nearest tabstop
set expandtab               " use spaces instead of tabs
set smarttab                " use tabs at the start of a line, spaces elsewherei
set nowrap
" }}}

" Code folding {{{
set foldmarker={{{,}}}
set foldenable              " enable folding
set foldmethod=marker
set foldnestmax=10          " maximum nesting of folds
set foldlevelstart=0        " folds start off closed
set foldlevel=0
" }}}

" Compilation {{{
autocmd FileType ruby map <F9> :w<CR>:!rubocop %<CR>
autocmd FileType javascript map <F9> :w<CR>:!eslint %<CR>
" }}}

" Netrw {{{
" 0: One file per line
" 1: One file per line with file size and time stamp
" 2: Files in columns
" 3: Tree
let g:netrw_liststyle=1
let g:netrw_localrmdir="rm -r" " Allow removal of directories that aren't empty
let g:netrw_altv=1            " Split to the right
" }}}

" Omnifunc {{{
filetype plugin on
set omnifunc=syntaxcomplete#Complete
" }}}

" Miscellaneous {{{

" Leader mappings
nnoremap <Leader>f :BLines<CR>
nnoremap <Leader>g :Lines<CR>
nnoremap <Leader>c :Commits<CR>
nnoremap <Leader>w :write<CR>
nnoremap <Leader>q :quit<CR>
" <Leader>r -- Cycle through relativenumber + number, number (only), and no
" numbering (mnemonic: relative).
nnoremap <silent> <leader>s :syntax sync fromstart<CR>

autocmd FileType markdown syntax sync fromstart

" Search and replace
nnoremap c* *Ncgn

" Pressing ESC removes highlighting
nnoremap <esc> :noh<return><esc>

" Don't lose selection when shifting left or right
xnoremap <  <gv
xnoremap >  >gv

" Disable arrow keys
inoremap  <Up>     <NOP>
inoremap  <Down>   <NOP>
inoremap  <Left>   <NOP>
inoremap  <Right>  <NOP>
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>

" Map h j k l to Ctrl+w+h j k l
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

nnoremap H ^
nnoremap L $
vnoremap H ^
vnoremap L g_

" Pressing ESC removes highlighting
nnoremap <esc> :noh<return><esc>

" Js doc
nmap <silent> <C-i> <Plug>(jsdoc)

" Complete with <Tab>
inoremap <silent><expr> <TAB>
    \ pumvisible() ? "\<C-n>" :
    \ <SID>check_back_space() ? "\<TAB>" :
    \ deoplete#mappings#manual_complete()
function! s:check_back_space() abort "{{{
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
endfunction"}}}

" Trim trailing whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

com! FormatJSON %!python -m json.tool

" Auto-create parent directories when expanding file
" Ref: http://stackoverflow.com/a/4294176/517528
function! s:MkNonExDir(file, buf)
    if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
        let dir=fnamemodify(a:file, ':h')
        if !isdirectory(dir)
            call mkdir(dir, 'p')
        endif
    endif
endfunction
augroup BWCCreateDir
    autocmd!
    autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

" Automatically close scratch window when finishing a completion or leaving
" insert mode
autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif

" Invert <Tab> behavior when pressing <Shift><Tab>
function! InsertTabWrapper()
  if pumvisible()
    return "\<c-n>"
  endif
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-x>\<c-o>"
  endif
endfunction
inoremap <expr><tab> InsertTabWrapper()
inoremap <expr><s-tab> pumvisible()?"\<c-p>":"\<c-d>"

" Automatically equalize splits when Vim is resized
autocmd VimResized * wincmd =

" Files + devicons
function! Fzf_files_with_dev_icons(command)
  let l:fzf_files_options = '--preview "bat --color always --style numbers {2..} | head -'.&lines.'"'
   function! s:edit_devicon_prepended_file(item)
    let l:file_path = a:item[4:-1]
    execute 'silent e' l:file_path
  endfunction
   call fzf#run({
        \ 'source': a:command.' | devicon-lookup',
        \ 'sink':   function('s:edit_devicon_prepended_file'),
        \ 'options': '-m ' . l:fzf_files_options,
        \ 'down':    '40%' })
endfunction
 " Open fzf Files
map <C-p> :call Fzf_files_with_dev_icons($FZF_DEFAULT_COMMAND)<CR>

" }}}
